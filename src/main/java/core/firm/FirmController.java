package core.firm;

import core.firm.*;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

@Controller    // This means that this class is a Controller
@RequestMapping(path="/firm") // This means URL's start with /demo (after Application path)
public class FirmController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private FirmRepository firmRepository;

    @GetMapping()
    public @ResponseBody Iterable<Firm> getAllFirms() {
        // This returns a JSON or XML with the users
        return firmRepository.findAll();
    }

    @PostMapping () // Map ONLY POST Requests
    public @ResponseBody String addNewFirm (
            @RequestParam String NIP,
            @RequestParam String name,
            @RequestParam Integer addid) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        Firm firmT = new Firm(NIP, name, addid);

        // add citizen to repository
        firmRepository.save(firmT);

        return "Firm added\n";
    }

    @PutMapping()
    public @ResponseBody String updateFirm(
            @RequestParam String NIP,
            @RequestParam String name,
            @RequestParam Integer addid) {

        Firm firmT = new Firm(NIP, name, addid);
        firmT.setAddid(addid);

        return firmRepository.findById(firmT.getNIP())
                .map(firm -> {
                    firm.setNIP(firmT.getNIP());
                    firm.setName(firmT.getName());
                    firm.setAddid(firmT.getAddid());
                    firmRepository.save(firm);
                    return "Firm updated\n";
                })
                .orElseGet(() -> {
                    // add new firm if not found
                    firmRepository.save(firmT);
                    return "Firm not found and added\n";
                });

    }

    @DeleteMapping()
    public @ResponseBody String deleteFirm(
            @RequestParam String NIP){

        firmRepository.deleteById(NIP);

        return "Firm deleted\n";
    }

    @GetMapping(path="/stat")
    public @ResponseBody Long getFirmCount() {
        // This returns a JSON or XML with the users
        return firmRepository.count();
    }
}