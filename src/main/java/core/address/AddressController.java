package core.address;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

@Controller    // This means that this class is a Controller
@RequestMapping(path="/address") // This means URL's start with /demo (after Application path)
public class AddressController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private AddressRepository addressRepository;

    @GetMapping()
    public @ResponseBody Iterable<Address> getAllAddresses() {
        // This returns a JSON or XML with the users
        return addressRepository.findAll();
    }

    @PostMapping () // Map ONLY POST Requests
    public @ResponseBody String addNewAddress (
            //@RequestParam String addid,
            @RequestParam String city,
            @RequestParam String street,
            @RequestParam String number,
            @RequestParam String apartment ) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        Address n = new Address(city, street, number, apartment);

        // add citizen to repository
        addressRepository.save(n);

        return "Address added\n";
    }

    @PutMapping()
    public @ResponseBody String updateAddress(
            @RequestParam Integer addid,
            @RequestParam String city,
            @RequestParam String street,
            @RequestParam String number,
            @RequestParam String apartment ) {

        Address addressT = new Address(city, street, number, apartment);
        addressT.setAddid(addid);

        return addressRepository.findById(addressT.getAddid())
                .map(estate -> {
                    estate.setCity(addressT.getCity());
                    estate.setStreet(addressT.getStreet());
                    estate.setNumber(addressT.getNumber());
                    estate.setApartment(addressT.getApartment());
                    addressRepository.save(estate);
                    return "Address updated\n";
                })
                .orElseGet(() -> {
                    // add new citizen if not found
                    addressRepository.save(addressT);
                    return "Address not found and added\n";
                });

    }

    @DeleteMapping()
    public @ResponseBody String deleteAddress(
            @RequestParam Integer addid) {

        addressRepository.deleteById(addid);

        return "Address deleted\n";
    }

    @GetMapping(path="/stat")
    public @ResponseBody Long getAddressCount() {
        // This returns a JSON or XML with the users
        return addressRepository.count();
    }
}