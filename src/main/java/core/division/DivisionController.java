package core.division;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

@Controller    // This means that this class is a Controller
@RequestMapping(path="/division") // This means URL's start with /demo (after Application path)
public class DivisionController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private DivisionRepository divisionRepository;

    @GetMapping()
    public @ResponseBody Iterable<Division> getAllDivisions() {
        // This returns a JSON or XML with the users
        return divisionRepository.findAll();
    }

    @PostMapping () // Map ONLY POST Requests
    public @ResponseBody String addNewDivision (
            @RequestParam String NIP,
            @RequestParam Integer addid) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        Division n = new Division(NIP, addid);

        // add citizen to repository
        divisionRepository.save(n);

        return "Division added\n";
    }

    @PutMapping()
    public @ResponseBody String updateDivision(
            @RequestParam String PESEL,
            @RequestParam Integer addid) {

        Division divisionReal = new Division(PESEL, addid);

        return divisionRepository.findById(divisionReal.getNIP())
                .map(division -> {
                    division.setNIP(divisionReal.getNIP());
                    division.setAddid(divisionReal.getAddid());
                    divisionRepository.save(division);
                    return "Division updated\n";
                })
                .orElseGet(() -> {
                    // add new citizen if not found
                    divisionRepository.save(divisionReal);
                    return "Division not found and added\n";
                });

    }

    @DeleteMapping()
    public @ResponseBody String deleteDivision(
            @RequestParam String NIP) {

        divisionRepository.deleteById(NIP);

        return "Division for NIP deleted\n";
    }

    @GetMapping(path="/stat")
    public @ResponseBody Long getAddressCount() {
        // This returns a JSON or XML with the users
        return divisionRepository.count();
    }
}