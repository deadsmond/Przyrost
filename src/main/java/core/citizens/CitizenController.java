package core.citizens;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

@Controller    // This means that this class is a Controller
@RequestMapping(path="/citizens") // This means URL's start with /demo (after Application path)
public class CitizenController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private CitizenRepository citizenRepository;

    @GetMapping()
    public @ResponseBody Iterable<Citizen> getAllCitizens() {
        // This returns a JSON or XML with the users
        return citizenRepository.findAll();
    }

    @PostMapping () // Map ONLY POST Requests
    public @ResponseBody String addNewCitizen (
            @RequestParam String PESEL,
            @RequestParam String name,
            @RequestParam String surname,
            @RequestParam String birthday,
            @RequestParam String sex ) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        Citizen n = new Citizen(PESEL, name, surname, birthday, sex);

        // add citizen to repository
        citizenRepository.save(n);

        return "Citizen added\n";
    }

    @PutMapping()
    public @ResponseBody String updateCitizen(
            @RequestParam String PESEL,
            @RequestParam String name,
            @RequestParam String surname,
            @RequestParam String birthday,
            @RequestParam String sex ) {

        Citizen citizenKane = new Citizen(PESEL, name, surname, birthday, sex);

        return citizenRepository.findById(citizenKane.getPESEL())
                .map(citizen -> {
                    citizen.setName(citizenKane.getName());
                    citizen.setSurname(citizenKane.getSurname());
                    citizen.setBirthday(citizenKane.getBirthday());
                    citizen.setSex(citizenKane.getSex());
                    citizenRepository.save(citizen);
                    return "Citizen updated\n";
                })
                .orElseGet(() -> {
                    // add new citizen if not found
                    citizenRepository.save(citizenKane);
                    return "Citizen not found and added\n";
                });

    }

    @DeleteMapping()
    public @ResponseBody String deleteCitizen(
            @RequestParam String PESEL) {

        citizenRepository.deleteById(PESEL);

        return "Citizen deleted\n";
    }

    @GetMapping(path="/stat")
    public @ResponseBody Long getCitizenCount() {
        // This returns a JSON or XML with the users
        return citizenRepository.count();
    }

}