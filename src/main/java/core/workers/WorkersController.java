package core.workers;

import org.hibernate.validator.constraints.pl.PESEL;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

@Controller    // This means that this class is a Controller
@RequestMapping(path="/workers") // This means URL's start with /demo (after Application path)
public class WorkersController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private WorkersRepository workersRepository;

    @GetMapping()
    public @ResponseBody Iterable<Workers> getAllWorkerss() {
        // This returns a JSON or XML with the users
        return workersRepository.findAll();
    }

    @PostMapping () // Map ONLY POST Requests
    public @ResponseBody String addNewWorkers (
            @RequestParam String PESEL,
            @RequestParam String NIP) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        Workers n = new Workers(PESEL, NIP);

        // add citizen to repository
        workersRepository.save(n);

        return "Workers added\n";
    }

    @PutMapping()
    public @ResponseBody String updateWorkers(
            @RequestParam String PESEL,
            @RequestParam String NIP) {

        Workers workersReal = new Workers(PESEL, NIP);

        return workersRepository.findById(workersReal.getPESEL())
                .map(workers -> {
                    workers.setPESEL(workersReal.getPESEL());
                    workers.setNIP(workersReal.getNIP());
                    workersRepository.save(workers);
                    return "Workers updated\n";
                })
                .orElseGet(() -> {
                    // add new citizen if not found
                    workersRepository.save(workersReal);
                    return "Workers not found and added\n";
                });

    }

    @DeleteMapping()
    public @ResponseBody String deleteWorkers(
            @RequestParam String PESEL){

        workersRepository.deleteById(PESEL);

        return "Workers for PESEL deleted\n";
    }

    @GetMapping(path="/stat")
    public @ResponseBody Long getAddressCount() {
        // This returns a JSON or XML with the users
        return workersRepository.count();
    }
}