package core.partners;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

@Controller    // This means that this class is a Controller
@RequestMapping(path="/partners") // This means URL's start with /demo (after Application path)
public class PartnersController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private PartnersRepository partnersRepository;

    @GetMapping()
    public @ResponseBody Iterable<Partners> getAllPartnerss() {
        // This returns a JSON or XML with the users
        return partnersRepository.findAll();
    }

    @PostMapping () // Map ONLY POST Requests
    public @ResponseBody String addNewPartners (
            @RequestParam String PESEL1,
            @RequestParam String PESEL2) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        Partners n = new Partners(PESEL1, PESEL2);

        // add citizen to repository
        partnersRepository.save(n);

        return "Partners added\n";
    }

    @PutMapping()
    public @ResponseBody String updatePartners(
           @RequestParam String PESEL1,
           @RequestParam String PESEL2) {

        Partners partnersReal = new Partners(PESEL1, PESEL2);

        return partnersRepository.findById(partnersReal.getPESEL1())
                .map(partners -> {
                    partners.setPESEL1(partnersReal.getPESEL1());
                    partners.setPESEL2(partnersReal.getPESEL2());
                    partnersRepository.save(partners);
                    return "Partners updated\n";
                })
                .orElseGet(() -> {
                    // add new citizen if not found
                    partnersRepository.save(partnersReal);
                    return "Partners not found and added\n";
                });

    }

    @DeleteMapping()
    public @ResponseBody String deletePartners(
            @RequestParam String PESEL1) {

        partnersRepository.deleteById(PESEL1);

        return "Partners for PESEL deleted\n";
    }

    @GetMapping(path="/stat")
    public @ResponseBody Long getAddressCount() {
        // This returns a JSON or XML with the users
        return partnersRepository.count();
    }
}